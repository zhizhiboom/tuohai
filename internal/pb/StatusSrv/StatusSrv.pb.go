// Code generated by protoc-gen-go.
// source: tuohai/internal/pb/StatusSrv/StatusSrv.proto
// DO NOT EDIT!

/*
Package StatusSrv is a generated protocol buffer package.

It is generated from these files:
	tuohai/internal/pb/StatusSrv/StatusSrv.proto

It has these top-level messages:
	Session
	StatusInfoReq
	SessionRst
	StatusInfoRst
*/
package StatusSrv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import IM_BaseDefine "tuohai/internal/pb/IM_BaseDefine"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Session struct {
	AccessHost     string                   `protobuf:"bytes,1,opt,name=access_host,json=accessHost" json:"access_host,omitempty"`
	DispatcherHost string                   `protobuf:"bytes,2,opt,name=dispatcher_host,json=dispatcherHost" json:"dispatcher_host,omitempty"`
	UserId         string                   `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Suuid          string                   `protobuf:"bytes,4,opt,name=suuid" json:"suuid,omitempty"`
	ClientType     IM_BaseDefine.ClientType `protobuf:"varint,5,opt,name=client_type,json=clientType,enum=IM.BaseDefine.ClientType" json:"client_type,omitempty"`
	DeviceId       string                   `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	RemoteHost     string                   `protobuf:"bytes,7,opt,name=remote_host,json=remoteHost" json:"remote_host,omitempty"`
	InitTime       int32                    `protobuf:"varint,8,opt,name=init_time,json=initTime" json:"init_time,omitempty"`
	LastHB         int32                    `protobuf:"varint,9,opt,name=last_hB,json=lastHB" json:"last_hB,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusInfoReq struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *StatusInfoReq) Reset()                    { *m = StatusInfoReq{} }
func (m *StatusInfoReq) String() string            { return proto.CompactTextString(m) }
func (*StatusInfoReq) ProtoMessage()               {}
func (*StatusInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SessionRst struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *SessionRst) Reset()                    { *m = SessionRst{} }
func (m *SessionRst) String() string            { return proto.CompactTextString(m) }
func (*SessionRst) ProtoMessage()               {}
func (*SessionRst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatusInfoRst struct {
	Result []*Session `protobuf:"bytes,1,rep,name=Result,json=result" json:"Result,omitempty"`
}

func (m *StatusInfoRst) Reset()                    { *m = StatusInfoRst{} }
func (m *StatusInfoRst) String() string            { return proto.CompactTextString(m) }
func (*StatusInfoRst) ProtoMessage()               {}
func (*StatusInfoRst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusInfoRst) GetResult() []*Session {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "StatusSrv.Session")
	proto.RegisterType((*StatusInfoReq)(nil), "StatusSrv.StatusInfoReq")
	proto.RegisterType((*SessionRst)(nil), "StatusSrv.SessionRst")
	proto.RegisterType((*StatusInfoRst)(nil), "StatusSrv.StatusInfoRst")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for StatusSrv service

type StatusSrvClient interface {
	AddSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionRst, error)
	StatusInfo(ctx context.Context, in *StatusInfoReq, opts ...grpc.CallOption) (*StatusInfoRst, error)
	DelSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionRst, error)
}

type statusSrvClient struct {
	cc *grpc.ClientConn
}

func NewStatusSrvClient(cc *grpc.ClientConn) StatusSrvClient {
	return &statusSrvClient{cc}
}

func (c *statusSrvClient) AddSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionRst, error) {
	out := new(SessionRst)
	err := grpc.Invoke(ctx, "/StatusSrv.StatusSrv/AddSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusSrvClient) StatusInfo(ctx context.Context, in *StatusInfoReq, opts ...grpc.CallOption) (*StatusInfoRst, error) {
	out := new(StatusInfoRst)
	err := grpc.Invoke(ctx, "/StatusSrv.StatusSrv/StatusInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusSrvClient) DelSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionRst, error) {
	out := new(SessionRst)
	err := grpc.Invoke(ctx, "/StatusSrv.StatusSrv/DelSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatusSrv service

type StatusSrvServer interface {
	AddSession(context.Context, *Session) (*SessionRst, error)
	StatusInfo(context.Context, *StatusInfoReq) (*StatusInfoRst, error)
	DelSession(context.Context, *Session) (*SessionRst, error)
}

func RegisterStatusSrvServer(s *grpc.Server, srv StatusSrvServer) {
	s.RegisterService(&_StatusSrv_serviceDesc, srv)
}

func _StatusSrv_AddSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusSrvServer).AddSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StatusSrv.StatusSrv/AddSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusSrvServer).AddSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusSrv_StatusInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusSrvServer).StatusInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StatusSrv.StatusSrv/StatusInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusSrvServer).StatusInfo(ctx, req.(*StatusInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusSrv_DelSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusSrvServer).DelSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StatusSrv.StatusSrv/DelSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusSrvServer).DelSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StatusSrv.StatusSrv",
	HandlerType: (*StatusSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSession",
			Handler:    _StatusSrv_AddSession_Handler,
		},
		{
			MethodName: "StatusInfo",
			Handler:    _StatusSrv_StatusInfo_Handler,
		},
		{
			MethodName: "DelSession",
			Handler:    _StatusSrv_DelSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("tuohai/internal/pb/StatusSrv/StatusSrv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0x4f, 0xef, 0xd2, 0x40,
	0x10, 0xb5, 0x94, 0x16, 0x3a, 0x44, 0x34, 0x1b, 0x8d, 0x15, 0x0f, 0x9a, 0x26, 0x46, 0x62, 0x62,
	0x49, 0xea, 0x49, 0x3d, 0x59, 0x39, 0xc0, 0xc1, 0x4b, 0xe1, 0xde, 0x94, 0x76, 0x90, 0x4d, 0x4a,
	0x5b, 0xbb, 0x5b, 0x12, 0xbf, 0x96, 0xdf, 0xc1, 0xef, 0xe5, 0x74, 0x17, 0x68, 0x49, 0xf8, 0x5d,
	0x7e, 0xb7, 0x79, 0x6f, 0xde, 0xfc, 0x79, 0x3b, 0x0b, 0xef, 0x79, 0x21, 0xb1, 0x2e, 0x92, 0x7c,
	0x51, 0xed, 0x16, 0x1b, 0x99, 0xc8, 0x46, 0x6c, 0xea, 0x53, 0x17, 0xf9, 0x55, 0x5d, 0xca, 0x92,
	0x39, 0x57, 0x62, 0xf6, 0xa9, 0x5f, 0xb1, 0xfe, 0x19, 0x87, 0x89, 0xc0, 0x25, 0xee, 0x79, 0x81,
	0x84, 0xfc, 0x0e, 0xe9, 0x4a, 0xef, 0xef, 0x00, 0x46, 0x1b, 0x14, 0x82, 0x97, 0x05, 0x7b, 0x0b,
	0x93, 0x24, 0x4d, 0x09, 0xc4, 0x87, 0x52, 0x48, 0xd7, 0x78, 0x67, 0xcc, 0x9d, 0x08, 0x34, 0xb5,
	0x22, 0x86, 0x7d, 0x80, 0x67, 0x19, 0x17, 0x55, 0x22, 0xd3, 0x03, 0xd6, 0x5a, 0x34, 0x50, 0xa2,
	0x69, 0x47, 0x2b, 0xe1, 0x2b, 0x18, 0x35, 0x82, 0x24, 0x3c, 0x73, 0x4d, 0x25, 0xb0, 0x5b, 0xb8,
	0xce, 0xd8, 0x0b, 0xb0, 0x44, 0xd3, 0x10, 0x3d, 0x54, 0xb4, 0x06, 0xec, 0x2b, 0x4c, 0xd2, 0x9c,
	0x63, 0x21, 0x63, 0xf9, 0xa7, 0x42, 0xd7, 0xa2, 0xdc, 0x34, 0x78, 0xed, 0xdf, 0xee, 0xfb, 0x43,
	0x29, 0xb6, 0x24, 0x88, 0x20, 0xbd, 0xc6, 0xec, 0x0d, 0x38, 0x19, 0x9e, 0x78, 0x8a, 0xed, 0x30,
	0x5b, 0x75, 0x1d, 0x6b, 0x82, 0xc6, 0x91, 0xa3, 0x1a, 0x8f, 0xa5, 0x44, 0xbd, 0xec, 0x48, 0x3b,
	0xd2, 0x94, 0x5a, 0x94, 0xaa, 0x79, 0xc1, 0x69, 0x2e, 0x3f, 0xa2, 0x3b, 0xa6, 0xb4, 0x15, 0x8d,
	0x5b, 0x62, 0x4b, 0xb8, 0x75, 0x91, 0x27, 0x42, 0xc6, 0x87, 0xd0, 0x75, 0x54, 0xca, 0x6e, 0xe1,
	0x2a, 0xf4, 0xe6, 0xf0, 0x54, 0x3f, 0xf8, 0xba, 0xd8, 0x97, 0x11, 0xfe, 0xee, 0xfb, 0x35, 0xfa,
	0x7e, 0xbd, 0x00, 0xe0, 0xfc, 0xba, 0x11, 0x4d, 0x63, 0x30, 0x4c, 0xcb, 0x0c, 0x95, 0xc6, 0x8a,
	0x54, 0xcc, 0x9e, 0x83, 0x79, 0x14, 0xbf, 0xce, 0xef, 0xd8, 0x86, 0xde, 0xb7, 0x9b, 0xee, 0x54,
	0xf6, 0x11, 0xec, 0x08, 0x45, 0x93, 0xb7, 0x27, 0x31, 0xe7, 0x93, 0x80, 0xf9, 0xdd, 0xfd, 0x2f,
	0xdd, 0xed, 0x5a, 0x29, 0x82, 0x7f, 0x06, 0x74, 0x9f, 0x81, 0x7d, 0x01, 0xf8, 0x9e, 0x65, 0x97,
	0xfb, 0xde, 0xa9, 0x9b, 0xbd, 0xbc, 0xd3, 0x4b, 0x48, 0xef, 0x09, 0x0b, 0x69, 0xf3, 0xeb, 0x16,
	0xcc, 0xed, 0xcb, 0xfa, 0xd6, 0x67, 0x0f, 0x64, 0x54, 0x0f, 0x1a, 0xbf, 0xc4, 0xfc, 0x31, 0xe3,
	0xc3, 0xc1, 0xca, 0xdc, 0xd9, 0xea, 0x8b, 0x7e, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x02,
	0xb8, 0x2c, 0x05, 0x03, 0x00, 0x00,
}
