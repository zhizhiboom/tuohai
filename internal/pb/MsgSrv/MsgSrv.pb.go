// Code generated by protoc-gen-go.
// source: internal/pb/MsgSrv/MsgSrv.proto
// DO NOT EDIT!

/*
Package MsgSrv is a generated protocol buffer package.

It is generated from these files:
	internal/pb/MsgSrv/MsgSrv.proto

It has these top-level messages:
	SendRst
*/
package MsgSrv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import IM_Message "tuohai/internal/pb/IM_Message"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendRst struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *SendRst) Reset()                    { *m = SendRst{} }
func (m *SendRst) String() string            { return proto.CompactTextString(m) }
func (*SendRst) ProtoMessage()               {}
func (*SendRst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*SendRst)(nil), "MsgSrv.SendRst")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MsgLogic service

type MsgLogicClient interface {
	// msg process logic
	SendMsg(ctx context.Context, in *IM_Message.IMMsgData, opts ...grpc.CallOption) (*IM_Message.IMMsgDataAck, error)
	DispatchMsg(ctx context.Context, in *IM_Message.IMMsgData, opts ...grpc.CallOption) (*SendRst, error)
}

type msgLogicClient struct {
	cc *grpc.ClientConn
}

func NewMsgLogicClient(cc *grpc.ClientConn) MsgLogicClient {
	return &msgLogicClient{cc}
}

func (c *msgLogicClient) SendMsg(ctx context.Context, in *IM_Message.IMMsgData, opts ...grpc.CallOption) (*IM_Message.IMMsgDataAck, error) {
	out := new(IM_Message.IMMsgDataAck)
	err := grpc.Invoke(ctx, "/MsgSrv.MsgLogic/SendMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgLogicClient) DispatchMsg(ctx context.Context, in *IM_Message.IMMsgData, opts ...grpc.CallOption) (*SendRst, error) {
	out := new(SendRst)
	err := grpc.Invoke(ctx, "/MsgSrv.MsgLogic/DispatchMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MsgLogic service

type MsgLogicServer interface {
	// msg process logic
	SendMsg(context.Context, *IM_Message.IMMsgData) (*IM_Message.IMMsgDataAck, error)
	DispatchMsg(context.Context, *IM_Message.IMMsgData) (*SendRst, error)
}

func RegisterMsgLogicServer(s *grpc.Server, srv MsgLogicServer) {
	s.RegisterService(&_MsgLogic_serviceDesc, srv)
}

func _MsgLogic_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IM_Message.IMMsgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgLogicServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MsgSrv.MsgLogic/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgLogicServer).SendMsg(ctx, req.(*IM_Message.IMMsgData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgLogic_DispatchMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IM_Message.IMMsgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgLogicServer).DispatchMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MsgSrv.MsgLogic/DispatchMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgLogicServer).DispatchMsg(ctx, req.(*IM_Message.IMMsgData))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MsgSrv.MsgLogic",
	HandlerType: (*MsgLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _MsgLogic_SendMsg_Handler,
		},
		{
			MethodName: "DispatchMsg",
			Handler:    _MsgLogic_DispatchMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for MsgSender service

type MsgSenderClient interface {
	// send to reciever
	SendTo(ctx context.Context, in *IM_Message.IMMsgData, opts ...grpc.CallOption) (*SendRst, error)
}

type msgSenderClient struct {
	cc *grpc.ClientConn
}

func NewMsgSenderClient(cc *grpc.ClientConn) MsgSenderClient {
	return &msgSenderClient{cc}
}

func (c *msgSenderClient) SendTo(ctx context.Context, in *IM_Message.IMMsgData, opts ...grpc.CallOption) (*SendRst, error) {
	out := new(SendRst)
	err := grpc.Invoke(ctx, "/MsgSrv.MsgSender/SendTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MsgSender service

type MsgSenderServer interface {
	// send to reciever
	SendTo(context.Context, *IM_Message.IMMsgData) (*SendRst, error)
}

func RegisterMsgSenderServer(s *grpc.Server, srv MsgSenderServer) {
	s.RegisterService(&_MsgSender_serviceDesc, srv)
}

func _MsgSender_SendTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IM_Message.IMMsgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgSenderServer).SendTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MsgSrv.MsgSender/SendTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgSenderServer).SendTo(ctx, req.(*IM_Message.IMMsgData))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MsgSrv.MsgSender",
	HandlerType: (*MsgSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTo",
			Handler:    _MsgSender_SendTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("internal/pb/MsgSrv/MsgSrv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xcf, 0xcc, 0x2b, 0x49,
	0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x2f, 0x48, 0xd2, 0xf7, 0x2d, 0x4e, 0x0f, 0x2e, 0x2a, 0x83, 0x52,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x94, 0x3a, 0xb2, 0x42, 0x4f, 0xdf,
	0x78, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x20, 0x53, 0x0f, 0xca, 0x84, 0x68, 0x50, 0xd2,
	0xe7, 0x62, 0x0f, 0x4e, 0xcd, 0x4b, 0x09, 0x2a, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0xce, 0x4f,
	0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x85, 0x04, 0xb8, 0x98, 0x73, 0x8b,
	0xd3, 0x25, 0x98, 0x80, 0x42, 0x9c, 0x41, 0x20, 0xa6, 0x51, 0x23, 0x23, 0x17, 0x07, 0xd0, 0x12,
	0x9f, 0xfc, 0xf4, 0xcc, 0x64, 0x21, 0x1b, 0x88, 0x6e, 0x20, 0x5f, 0x48, 0x54, 0x0f, 0xc9, 0x6c,
	0x4f, 0x5f, 0xa0, 0x90, 0x4b, 0x62, 0x49, 0xa2, 0x94, 0x04, 0x56, 0x61, 0xc7, 0xe4, 0x6c, 0x25,
	0x06, 0x21, 0x73, 0x2e, 0x6e, 0x97, 0xcc, 0xe2, 0x82, 0xc4, 0x92, 0xe4, 0x0c, 0x3c, 0x26, 0xf0,
	0xeb, 0x41, 0x7d, 0x08, 0x75, 0xa7, 0x12, 0x83, 0x91, 0x3d, 0x17, 0x27, 0x48, 0x0c, 0xc8, 0x4f,
	0x2d, 0x12, 0x32, 0xe2, 0x62, 0x03, 0xb1, 0x42, 0xf2, 0x89, 0x37, 0xc0, 0x89, 0xc9, 0x83, 0x39,
	0x89, 0x0d, 0x1c, 0x00, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x45, 0x57, 0x67, 0x54,
	0x01, 0x00, 0x00,
}
